#%%
from utils import *
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.patches as patches

# TODO fix new directory structure

# ==================== #
# All history analysis #
# ==================== #

# Get entire price history
tickers = 'QQQX TLT'
all_history = yf.download(tickers, period='max')
all_history.dropna(inplace=True)

# Walk over 90 day periods and calculate growth rates
today = all_history.index.values[-1]
qqqx_gr = []
tlt_gr = []
dates = []
next_90_in_range = True
i = 0

while next_90_in_range:
    start = all_history.index.values[i]
    end = start + np.timedelta64(90, 'D')
    mask = (all_history.index.values >= start) & (all_history.index.values <= end)
    
    qqqx, tlt  = calc_growth(all_history.loc[mask])
    qqqx_gr.append(qqqx)
    tlt_gr.append(tlt)
    
    date = all_history.loc[mask].index.values[-1]
    dates.append(date)
    
    i += 1
    
    if date == today:
        next_90_in_range = False

# Convert to dataframe
d = {
    'period_end_date': dates,
    'QQQX': qqqx_gr,
    'TLT': tlt_gr
}
growth_rate_df = pd.DataFrame(data=d)
growth_rate_df.set_index('period_end_date', inplace=True)

# Calculate winner
growth_rate_df['winner'] = growth_rate_df.idxmax(axis=1)
monthly_counts = growth_rate_df.groupby(pd.Grouper(freq='M'))['winner'].value_counts(normalize=True, dropna=False).to_frame()

monthly_counts.columns = ['count']
monthly_counts.reset_index(level=[1], inplace=True)
monthly_counts_wide = monthly_counts.pivot(columns='winner')
monthly_counts_wide.fillna(0, inplace=True)
monthly_counts_wide.columns = monthly_counts_wide.columns.get_level_values(1)

monthly_counts_wide['winner'] = monthly_counts_wide.idxmax(axis=1)
monthly_counts_wide['win_pct'] = monthly_counts_wide.max(axis=1)


# Calculate Quantities of interest
monthly_counts_wide['lag'] = monthly_counts_wide['winner'].shift()
monthly_counts_wide.dropna(inplace=True)
monthly_counts_wide['rotate'] = (monthly_counts_wide['winner'] != monthly_counts_wide['lag'])

#%%
# 1. number of adjustments per year
adj_year_df = monthly_counts_wide.groupby(pd.Grouper(freq='Y')).rotate.sum().to_frame()
adj_year_df.reset_index(inplace=True)
adj_year_df.columns = ['Date', 'Adjustments']
adj_year_df['Year'] = pd.DatetimeIndex(adj_year_df['Date']).year

adj_year_count = sns.barplot(
    x='Year', 
    y='Adjustments',
    data=adj_year_df,
    color='tab:blue'
    )
adj_year_count.set_xticklabels(adj_year_count.get_xticklabels(), rotation=45)
adj_year_count.set_title('Number of Rotations Per Year [Taxable Events]')

plt.savefig('figures/adj_year_count.png', dpi=300)
plt.show()

#%%
# Average number of adjustments per year
avg_n_adj = round(adj_year_df.Adjustments.mean(), 1)
print('There are {} adjustments on average per year.'.format(avg_n_adj))

#%%
# 2. Monthly Average of 90-Day Growth Rates
avg_growth_df = growth_rate_df.groupby(pd.Grouper(freq='M'))[['QQQX', 'TLT']].mean()
long_df = avg_growth_df.stack().to_frame()
long_df.reset_index(level=[0,1], inplace=True)
long_df.columns = ['Date', 'Ticker', 'Growth Rate (%)']
avg_growth_plot = sns.lineplot(
    data=long_df,
    x="Date",
    y="Growth Rate (%)",
    hue='Ticker'
)
avg_growth_plot.set_title('Monthly Average of 90-Day Growth Rates')
ax1 = avg_growth_plot.axes
ax1.axhline(0, ls='--', color='black', alpha=0.5)

plt.savefig('figures/avg_growth_plot.png', dpi=300)
plt.show()

#%%
# 3. Focus in on corrections
# add years
long_df['Year'] = pd.DatetimeIndex(long_df['Date']).year

# add correction periods
conditions = [
    (long_df['Date'] > '2007-01-01') & (long_df['Date'] <= '2009-08-31'),
    (long_df['Date'] > '2011-01-01') & (long_df['Date'] <= '2012-01-01'),
    (long_df['Date'] > '2015-07-01') & (long_df['Date'] <= '2016-01-01'),
    (long_df['Date'] > '2020-01-01') & (long_df['Date'] <= '2020-12-01')
]
choices = ['2007-08 Financial Crisis', 'August 2011 Shock',
           '2015-2016 Sell Off', 'Covid-19 Pandemic']
start_date = ['2007-10-10', '2011-08-15', '2015-08-18', '2020-02-20']
long_df['Correction'] = np.select(conditions, choices, default=pd.NA) 
correction_df = long_df.dropna(subset=['Correction'])

#%%
# custom plotting function
def plot_correction(x, y, **kwargs):
    sns.lineplot(x=x, y=y)
    plt.xticks(rotation=35)
    
    
hue_order = correction_df.Ticker.unique()

# Setup facet grid and plot
g = sns.FacetGrid(correction_df, 
                  col='Correction', 
                  hue='Ticker', 
                  hue_order=hue_order,
                  col_wrap=2,
                  height=4, 
                  sharex=False)
g.map(plot_correction, 'Date', 'Growth Rate (%)')

# Add horizontal/vertical lines
for ax, st in zip(g.axes.flat, start_date):
    ax.axhline(0, ls='--', color='black', alpha=0.5)
    ax.axvline(pd.Timestamp(st), ls='-', color='red', alpha=0.5)

# Remove column name from facet title
g.set_titles('{col_name}')

# Fix legend
colors = sns.color_palette().as_hex()[:len(hue_order)]
handles = [patches.Patch(color=col, label=lab) for col, lab in zip(colors, hue_order)]
plt.legend(handles=handles, title = 'Ticker', loc='center left', bbox_to_anchor = (1, 1))

# Add padding
plt.subplots_adjust(hspace=0.4, wspace=0.4, top=0.9)

# Add title
g.fig.suptitle('90-Day Growth Rates during Market Corrections')

# save
plt.savefig('figures/market_corrections.png', bbox_inches='tight')

#%%
# 3. Total number of periods invested in each
monthly_counts_wide.winner.value_counts()
